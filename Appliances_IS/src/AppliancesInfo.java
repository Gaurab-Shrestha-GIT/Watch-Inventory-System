
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author nts
 */
public class AppliancesInfo extends javax.swing.JFrame {

    /**
     * Creates new form WIS
     */
    private ArrayList <WatchData> list = new ArrayList();
    private ArrayList<String>watchNames = new ArrayList<>();
    
    
    String genderRadioBtn;
    String rangeRadioBtn;
    String recoomendationChckBox;
    
    
    public AppliancesInfo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderBtnGrp = new javax.swing.ButtonGroup();
        rangeBtnGrp = new javax.swing.ButtonGroup();
        recommendantionCheckBox = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        isTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        highRadio = new javax.swing.JRadioButton();
        maleRadio = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        watchNameText = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        categoryCmbBox = new javax.swing.JComboBox<>();
        noChckBox = new javax.swing.JCheckBox();
        mpText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        communityChckBox = new javax.swing.JCheckBox();
        mediumRadio = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        femaleRadio = new javax.swing.JRadioButton();
        companyChckBox = new javax.swing.JCheckBox();
        lowRadio = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        modelNumberText = new javax.swing.JTextField();
        disText = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        searchWatchBtn = new javax.swing.JButton();
        searchWatchesText = new javax.swing.JTextField();
        watchAvailableBtn = new javax.swing.JButton();
        uniSexRadio = new javax.swing.JRadioButton();
        clearTableBtn = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenuItem = new javax.swing.JMenu();
        helpContent = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Watch Inventory System");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Watch Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Arial", 1, 18))); // NOI18N

        isTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Model Number", "Watch Name", "Gender", "Selling Price (Rs.)", "Range", "Category", "Recommendation"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(isTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 973, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Watch Input Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Arial", 1, 18))); // NOI18N

        rangeBtnGrp.add(highRadio);
        highRadio.setText("High");

        genderBtnGrp.add(maleRadio);
        maleRadio.setText("Male");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Range:");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("Category:");

        jLabel8.setText("Discount:");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("Recommendation:");

        jLabel9.setText("%");

        categoryCmbBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Automatic Watches", "Diver Watches", "Fashion Watches", "Italian Design Watches", "Luxury Watches", "Quartz Watches", "Sports Watches" }));

        recommendantionCheckBox.add(noChckBox);
        noChckBox.setText("No Recommendation");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Marked Price");

        recommendantionCheckBox.add(communityChckBox);
        communityChckBox.setText("Community");

        rangeBtnGrp.add(mediumRadio);
        mediumRadio.setText("Medium");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Gender:");

        genderBtnGrp.add(femaleRadio);
        femaleRadio.setText("Female");

        recommendantionCheckBox.add(companyChckBox);
        companyChckBox.setText("Company");

        rangeBtnGrp.add(lowRadio);
        lowRadio.setText("Low");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Watch Name:");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Model Number:");

        addBtn.setText("Add to Table");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        searchWatchBtn.setText("Search Watches");
        searchWatchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchWatchBtnActionPerformed(evt);
            }
        });

        watchAvailableBtn.setText("Types of Watches Available");
        watchAvailableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                watchAvailableBtn(evt);
            }
        });

        genderBtnGrp.add(uniSexRadio);
        uniSexRadio.setText("Unisex");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(37, 37, 37)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(lowRadio)
                                                .addGap(18, 18, 18)
                                                .addComponent(mediumRadio)
                                                .addGap(23, 23, 23)
                                                .addComponent(highRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(modelNumberText)))
                                    .addComponent(jLabel5)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(144, 144, 144)
                                                .addComponent(maleRadio)
                                                .addGap(18, 18, 18)
                                                .addComponent(femaleRadio))
                                            .addComponent(jLabel3))
                                        .addGap(18, 18, 18)
                                        .addComponent(uniSexRadio)))
                                .addGap(187, 187, 187)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addGap(37, 37, 37)
                                            .addComponent(mpText, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel8)
                                            .addGap(18, 18, 18)
                                            .addComponent(disText, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel9))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addGap(37, 37, 37)
                                            .addComponent(watchNameText)))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(63, 63, 63)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(categoryCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(watchAvailableBtn)
                                            .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(searchWatchBtn))
                        .addGap(0, 54, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(searchWatchesText, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(companyChckBox)
                                .addGap(18, 18, 18)
                                .addComponent(communityChckBox)))
                        .addGap(18, 18, 18)
                        .addComponent(noChckBox)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(modelNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(watchNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(maleRadio)
                    .addComponent(femaleRadio)
                    .addComponent(jLabel4)
                    .addComponent(mpText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(disText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(uniSexRadio))
                .addGap(44, 44, 44)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lowRadio)
                    .addComponent(mediumRadio)
                    .addComponent(highRadio)
                    .addComponent(jLabel6)
                    .addComponent(categoryCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(watchAvailableBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(companyChckBox)
                    .addComponent(noChckBox)
                    .addComponent(communityChckBox))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchWatchBtn)
                    .addComponent(searchWatchesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65))
        );

        clearTableBtn.setText("Clear Table");
        clearTableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTableBtnActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(openMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        helpMenuItem.setText("Help");

        helpContent.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        helpContent.setText("Help Contents");
        helpContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpContentActionPerformed(evt);
            }
        });
        helpMenuItem.add(helpContent);

        jMenuBar1.add(helpMenuItem);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(clearTableBtn)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(clearTableBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
        int exit = JOptionPane.showConfirmDialog(rootPane,"Are you sure you want to exit?","Exit",JOptionPane.YES_NO_OPTION);
        if(exit == 0){
        System.exit(0);
        }
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void helpContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpContentActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(rootPane, "Inventory System's Help Contents\ni. Press Ctrl+Shift+O as a shortcut key for opening a demonstration file of the storage in the table."
                + "\nii. Model Number of the watch must be less than 100 and only accepts numbers."
                +"\niii. Watch's Range has 3 different level where below Rs.5000 watch are kept in Low Range, between Rs.5000 and Rs.15000 watches are kept in Medium Range and above Rs.15000 watches are kept in High Range."
                + "\niv. Search Watch button is used to search watches according to their price."
                + "\nv. Types of Watches Available button is used to search the watch according to the cateogry selected in the category combo box.", "Help", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_helpContentActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
        String modelNumber = modelNumberText.getText();
        String watchName = watchNameText.getText().trim();
        String markedPrice = mpText.getText().trim();
        String discountPer = disText.getText().trim();
        double sP;
        
        
        try{
            
                if(!modelNumber.isEmpty() && !watchName.isEmpty() && (maleRadio.isSelected() || femaleRadio.isSelected() || uniSexRadio.isSelected()) && !markedPrice.isEmpty() && !discountPer.isEmpty()&&
                        (lowRadio.isSelected() || mediumRadio.isSelected() || highRadio.isSelected()) && (companyChckBox.isSelected()|| communityChckBox.isSelected() || noChckBox.isSelected())){ 

                    int mdlNumber = Integer.parseInt(modelNumber);
                    double mp = Integer.parseInt(markedPrice);
                    double disPer = Integer.parseInt(discountPer);
                    
                    
                    if(maleRadio.isSelected()){
                    genderRadioBtn = "Male";
                    }else if(femaleRadio.isSelected()){
                        genderRadioBtn = "Female";
                    }else if(uniSexRadio.isSelected()){
                        genderRadioBtn = "Unisex";
                    }
                    

                    if(lowRadio.isSelected()){
                        rangeRadioBtn = "Low";
                    }else if(mediumRadio.isSelected()){
                        rangeRadioBtn = "Medium";
                    }else if(highRadio.isSelected()){
                        rangeRadioBtn = "High";
                    }

                    String categoryComboBox = categoryCmbBox.getSelectedItem().toString();

                    if(companyChckBox.isSelected()){
                        recoomendationChckBox = "Company";
                    }else if(communityChckBox.isSelected()){
                        recoomendationChckBox = "Community";
                    }else if(noChckBox.isSelected()){
                        recoomendationChckBox = "No Recommendation";
                    }
                    
                    if(mdlNumber < 100){
                        for(WatchData w:list){
                            
                            if(mdlNumber== w.getModelNumber()){
                                
                                JOptionPane.showMessageDialog(rootPane, "The entered model number of the watch is already stored.\nPlease enter new model number.", "Error", JOptionPane.ERROR_MESSAGE);
                                
                                return;
                            }  
                        }
                        
                    }else{
                        JOptionPane.showMessageDialog(rootPane,"The model number must be less than 100. CTRL + Shift + F for help", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    

                    if(mp <= 0){
                        JOptionPane.showMessageDialog(rootPane,"Selling Price must be greater than 0. CTRL + Shift + F for help", "Information Message" ,JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }else if(mp > 0 && mp <= 5000 && (mediumRadio.isSelected() || highRadio.isSelected())){
                        JOptionPane.showMessageDialog(rootPane,"The watch must be in low price range. CTRL + Shift + F for help", "Error" ,JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    else if(mp>5000 && mp<=15000 &&(lowRadio.isSelected() || highRadio.isSelected())){
                    
                        JOptionPane.showMessageDialog(rootPane,"The watch must be in medium price range. CTRL + Shift + F for help.","Error",JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    else if(mp>15000 && (lowRadio.isSelected() || mediumRadio.isSelected())){
                    
                        JOptionPane.showMessageDialog(rootPane,"The watch must be in high price range. CTRL + Shift + F for help.","Error",JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    
                    if (disPer > 35){
                        JOptionPane.showMessageDialog(rootPane,"Discount percentage must be lesser than 35. CTRL + Shift + F for help", "Information Message" ,JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }
                    else if(disPer > 0){
                        
                        sP = (mp - (mp * disPer/100));
                        
                    }
                    else{
                        JOptionPane.showMessageDialog(rootPane,"Discount percentage must be greater than 0. CTRL + Shift + F for help", "Information Message" ,JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }
                    
//                    int rowCount = isTable.getRowCount();
//                    int nextRow = 0; //shows which row is empty
//                    boolean emptyRowFlag = false; //this denotes whether an empty row has been found or not
//                    String s;
//                    do{
//                        s = (String) isTable.getValueAt(nextRow,0);
//                        if(s != null && s.length() != 0 ){
//                            nextRow++;
//                        }else{
//                            emptyRowFlag = true;
//                        }
//                    }while(nextRow < rowCount && !emptyRowFlag);
//            
//                    if(emptyRowFlag){
//                        int colCount = isTable.getColumnCount();
//                        String[] value = {Integer.toString(mdlNumber), watchName, genderRadioBtn, Double.toString(sP), rangeRadioBtn, categoryComboBox, recoomendationChckBox};
//                        WatchData obj = new WatchData(Integer.toString(mdlNumber), watchName, genderRadioBtn, Double.toString(sP), rangeRadioBtn, categoryComboBox, recoomendationChckBox);
//                        list.add(obj);
//                        for (int i = 0; i < colCount; i++){
//                            isTable.setValueAt(value[i], nextRow, i);
//                    }  
//            }else{
//                JOptionPane.showMessageDialog(rootPane, "No empty rows found", "Error", 0);
//            }
                    
                    
                    DefaultTableModel tblWatch = (DefaultTableModel)isTable.getModel();
                    tblWatch.addRow(new Object[]{mdlNumber, watchName, genderRadioBtn, sP, rangeRadioBtn, categoryComboBox, recoomendationChckBox});
                    WatchData obj = new WatchData(Integer.toString(mdlNumber), watchName, genderRadioBtn, Double.toString(sP), rangeRadioBtn, categoryComboBox, recoomendationChckBox);
                    list.add(obj);
                    
                    
                    modelNumberText.setText("");
                    watchNameText.setText("");
                    mpText.setText("");
                    disText.setText("");
                    genderBtnGrp.clearSelection();
                    rangeBtnGrp.clearSelection();
                    recommendantionCheckBox.clearSelection();
                }else{
                    JOptionPane.showMessageDialog(rootPane, "Please do not leave any fields empty or any buttons unclicked.", "Empty", JOptionPane.ERROR_MESSAGE);
                }
            }catch(NumberFormatException nfe){
                JOptionPane.showMessageDialog(rootPane, "Please Enter data in correct format", "Error",JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_addBtnActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        
            String textPath = "src/File.txt";//File source for importing stored file
            File f = new File(textPath);
            
            try{
                FileReader fileReader = new FileReader(f);
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                
                DefaultTableModel model = (DefaultTableModel)isTable.getModel();
                Object[] line = bufferedReader.lines().toArray();
                
                for(int i = 0; i < line.length; i++){
                String[] row = line[i].toString().split(" ");
                model.addRow(row);
                }
            } catch (FileNotFoundException ex) {
            Logger.getLogger(AppliancesInfo.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void clearTableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTableBtnActionPerformed
        // TODO add your handling code here:
        int choice = JOptionPane.showConfirmDialog(rootPane,"Are you sure you want to clear table?","Clear",JOptionPane.YES_NO_OPTION);//Yes or No option for the user.
        
        if(choice == 0){
            
            DefaultTableModel model = (DefaultTableModel)isTable.getModel();
            while(model.getRowCount() > 0){
                for(int i = 0; i < model.getRowCount(); i++){
                    model.removeRow(i);
                }
            }
            list.clear();
        }
        

    }//GEN-LAST:event_clearTableBtnActionPerformed

    private void watchAvailableBtn(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_watchAvailableBtn
        // TODO add your handling code here  
        found();//calling method
    }//GEN-LAST:event_watchAvailableBtn

    private void searchWatchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchWatchBtnActionPerformed
        // TODO add your handling code here:
        String searchInput = searchWatchesText.getText().trim();
        
        if (!searchInput.isEmpty())
            try{
                Double searchValue = Double.parseDouble(searchInput);
                selectionSort();//method called
                int result = binarySearchByPrice(list, 0, list.size()-1, searchValue);
                
                if (result == -1){
                    JOptionPane.showMessageDialog(rootPane, "There is no any items available on the selling price of Rs." + searchValue + " in the storage.", "Items Not Found!", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                else{
                    JOptionPane.showMessageDialog(rootPane, "Your Result"+"\nModel Number = " + list.get(result).getModelNumber() + "\nWatch Name= " +
                    list.get(result).getWatchName() + "\nGender = " + list.get(result).getGenderRadioBtn() + "\nSelling Price = "+ list.get(result).getSellingPrice() + 
                    "\nRange = "+list.get(result).getRangeRadioBtn() + "\nCategory = " + list.get(result).getCategoryComboBox() + 
                    "\nRecommendation = " + list.get(result).getRecoomendationChckBox(), "Items Information", JOptionPane.INFORMATION_MESSAGE);
                    searchWatchesText.setText("");
                }
            }
            catch (Exception e){
                JOptionPane.showMessageDialog(rootPane, "You are requested to enter the price of the watch.", "Error", JOptionPane.ERROR_MESSAGE);
            }
          
        else{
            JOptionPane.showMessageDialog(rootPane, "Please do not leave price tag text empty.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchWatchBtnActionPerformed

    public void selectionSort(){
        for (int i = 0; i < list.size()-1; i++){ //placing the element in the right spot
            int place = i;
            for (int j = i + 1; j < list.size(); j++){
                if (list.get(j).getSellingPrice() < list.get(place).getSellingPrice())
                    place = j;
            }
            Collections.swap(list, i, place);
        }
    }
    public int binarySearchByPrice(ArrayList<WatchData> list, int low, int high, double searchValue){
        if (low <= high){
            int midValue = (low + high)/2;
            
            if (list.get(midValue).getSellingPrice() == searchValue)
                    return midValue;
            else if (list.get(midValue).getSellingPrice() > searchValue)
                return binarySearchByPrice(list, low, midValue-1, searchValue);
            else
                return binarySearchByPrice(list, midValue+1, high, searchValue);
        }
        return -1;
    }
public  void found(){
        String category = categoryCmbBox.getSelectedItem().toString();
        int index = search(list,category);
        if(index == -1){
            JOptionPane.showMessageDialog(rootPane,"There is no any watch available in the "+ categoryCmbBox.getSelectedItem().toString()+" category .","Watch Unavailable!",JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            int count = count();
            if(count == 1){
                JOptionPane.showMessageDialog(rootPane,"There is only one type of watch available of "+category+" category in the table.i.e: "+watchNames,"Watch Available",JOptionPane.INFORMATION_MESSAGE);
                watchNames.clear();
            }
            else{
                JOptionPane.showMessageDialog(rootPane,"There are "+count+" types of watches available of "+category+" category in the table.i.e: "+watchNames,"Watch Available",JOptionPane.INFORMATION_MESSAGE);
                watchNames.clear();
            }   
        }
    }
    public int count(){
        int count = 0;
        String category = categoryCmbBox.getSelectedItem().toString();
        
        for(WatchData w: list){
            if(w.getCategoryComboBox().equals(category)){
                count++;
                watchNames.add(w.getWatchName());
            }
        }
        return count;
    }

    public int search(ArrayList<WatchData>List,String category){
            for(int i = 0;i<List.size();i++){
                if(List.get(i).getCategoryComboBox().equals(category)){
                    return i;
                }
            }
            return -1;
        }    
    
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(WIS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(WIS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(WIS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(WIS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new WIS().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JComboBox<String> categoryCmbBox;
    private javax.swing.JButton clearTableBtn;
    private javax.swing.JCheckBox communityChckBox;
    private javax.swing.JCheckBox companyChckBox;
    private javax.swing.JTextField disText;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JRadioButton femaleRadio;
    private javax.swing.ButtonGroup genderBtnGrp;
    private javax.swing.JMenuItem helpContent;
    private javax.swing.JMenu helpMenuItem;
    private javax.swing.JRadioButton highRadio;
    private javax.swing.JTable isTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton lowRadio;
    private javax.swing.JRadioButton maleRadio;
    private javax.swing.JRadioButton mediumRadio;
    private javax.swing.JTextField modelNumberText;
    private javax.swing.JTextField mpText;
    private javax.swing.JCheckBox noChckBox;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.ButtonGroup rangeBtnGrp;
    private javax.swing.ButtonGroup recommendantionCheckBox;
    private javax.swing.JButton searchWatchBtn;
    private javax.swing.JTextField searchWatchesText;
    private javax.swing.JRadioButton uniSexRadio;
    private javax.swing.JButton watchAvailableBtn;
    private javax.swing.JTextField watchNameText;
    // End of variables declaration//GEN-END:variables
}
